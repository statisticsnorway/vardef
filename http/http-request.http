# Choose an environment above
# Define secrets in http-client.private.env.json

### Draft
# Json body can be added directly or imported from file
# Save id from response
POST {{HOST}}/variable-definitions?active_group={{DAPLA_GROUP_CONTEXT}}
Authorization: Bearer {{OIDC_TOKEN}}
Content-Type: application/json

< ./data/landbakk.json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 201, "Request failed");
    });
    client.global.set('variable-definition-id', response.body.id);
%}

###
# Can add query value: date_of_validity
GET {{HOST}}/variable-definitions/{{variable-definition-id}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

###
GET {{HOST}}/variable-definitions
Accept: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

###
# Change status {"variable_status": "PUBLISHED_INTERNAL"}
PATCH  {{HOST}}/variable-definitions/{{variable-definition-id}}?active_group={{DAPLA_GROUP_CONTEXT}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

{ "short_name": "runbak"}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

### Patches
GET {{HOST}}/variable-definitions/{{variable-definition-id}}/patches
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

###
# Can add query value: valid_from to specify to which period
# Change status {"variable_status": "PUBLISHED_EXTERNAL"}
POST {{HOST}}/variable-definitions/{{variable-definition-id}}/patches?active_group={{DAPLA_GROUP_CONTEXT}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

{
  "owner": {
    "team": "play-obr-b",
    "groups": [
      "play-obr-b-developers",
      "dapla-felles-developers",
      "play-enhjoern-a-developers"
    ]
  }
}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

###
@patch-id = 1
GET {{HOST}}/variable-definitions/{{variable-definition-id}}/patches/{{patch-id}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

### Validity periods
GET {{HOST}}/variable-definitions/{{variable-definition-id}}/validity-periods
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

###
POST {{HOST}}/variable-definitions/{{variable-definition-id}}/validity-periods?active_group={{DAPLA_GROUP_CONTEXT}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

{
    "definition": {
        "en": "New definition",
        "nb": "Ny definisjon",
        "nn": "Ny definisjon"
      },
      "valid_from": "2024-01-01"
 }

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

### Vardok migration
@vardok-id = 134
POST {{HOST}}/vardok-migration/{{vardok-id}}?active_group={{DAPLA_GROUP_CONTEXT}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 201, "Request failed");
    });
%}

###
GET {{HOST}}/vardok-migration?active_group={{DAPLA_GROUP_CONTEXT}}
Content-Type: application/json
Authorization: Bearer {{OIDC_TOKEN}}

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

### Public
# Variables must have status PUBLISHED_EXTERNAL
# Can add query value: date_of_validity
GET {{HOST}}/public/variable-definitions
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}

###
GET {{HOST}}/public/variable-definitions/{{variable-definition-id}}
Content-Type: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Request failed");
    });
%}
